// <auto-generated />
using System;
using Car.Renting.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Car.Renting.DAL.Migrations
{
    [DbContext(typeof(CarRentingContext))]
    [Migration("20230813094905_AddingCounterColumn")]
    partial class AddingCounterColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Car.Renting.DAL.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Counter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Counter"));

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60d9b67f-ee5f-4277-88b1-8d2cb435feec"),
                            BrandName = "Toyota",
                            Counter = 0,
                            ModelName = "Toyota Camry",
                            ModelType = "Sedan",
                            ModelYear = 2023,
                            Power = 203
                        },
                        new
                        {
                            Id = new Guid("b81f0e37-6fd1-477c-a3d1-501463a737b3"),
                            BrandName = "Honda",
                            Counter = 0,
                            ModelName = "Honda Civic",
                            ModelType = "Sedan",
                            ModelYear = 2023,
                            Power = 174
                        },
                        new
                        {
                            Id = new Guid("151360ca-0ff1-4ad6-9d03-51c3ee9ed046"),
                            BrandName = "Tesla",
                            Counter = 0,
                            ModelName = "Tesla Model 3",
                            ModelType = "Sedan",
                            ModelYear = 2023,
                            Power = 358
                        });
                });

            modelBuilder.Entity("Car.Renting.DAL.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdvancedPayment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicenseNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c80b32f5-9f3f-47ab-9118-b2ce8ed20cff"),
                            AdvancedPayment = "",
                            DrivingLicenseNo = "1234567890",
                            Name = "John Doe",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = new Guid("a1cb2854-ec5d-4b35-afd2-f6d91a97a7e5"),
                            AdvancedPayment = "",
                            DrivingLicenseNo = "9876543210",
                            Name = "Jane Doe",
                            Nationality = "Canadian"
                        },
                        new
                        {
                            Id = new Guid("8002ca5a-7693-4e15-9ae9-fb9efcad2852"),
                            AdvancedPayment = "",
                            DrivingLicenseNo = "0123456789",
                            Name = "Peter Smith",
                            Nationality = "British"
                        });
                });

            modelBuilder.Entity("Car.Renting.DAL.Data.BookingCars", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BookingCars");
                });

            modelBuilder.Entity("Car.Renting.DAL.RentedCars", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingCarsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentDuration")
                        .HasColumnType("datetime2");

                    b.HasKey("CarId", "BookingCarsId");

                    b.HasIndex("BookingCarsId");

                    b.ToTable("RentedCars");
                });

            modelBuilder.Entity("Car.Renting.DAL.Data.BookingCars", b =>
                {
                    b.HasOne("Car.Renting.DAL.Car", null)
                        .WithMany("BookingCars")
                        .HasForeignKey("CarId");

                    b.HasOne("Car.Renting.DAL.Customer", "Customer")
                        .WithMany("BookingCars")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Car.Renting.DAL.RentedCars", b =>
                {
                    b.HasOne("Car.Renting.DAL.Data.BookingCars", "Booking")
                        .WithMany("RentedCars")
                        .HasForeignKey("BookingCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Car.Renting.DAL.Car", b =>
                {
                    b.Navigation("BookingCars");
                });

            modelBuilder.Entity("Car.Renting.DAL.Customer", b =>
                {
                    b.Navigation("BookingCars");
                });

            modelBuilder.Entity("Car.Renting.DAL.Data.BookingCars", b =>
                {
                    b.Navigation("RentedCars");
                });
#pragma warning restore 612, 618
        }
    }
}
